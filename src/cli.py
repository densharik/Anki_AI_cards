"""–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–æ–∫ Anki."""

import asyncio
import sys
from typing import List, Optional, Tuple

from loguru import logger

from .anki_client import AnkiClient
from .config import NOTE_TYPE_CONFIGS
from .pipeline import ProcessingPipeline
from .settings import PROCESSING_CONFIG
from .validators import NoteValidator


class CLIInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    
    def __init__(self):
        self.anki_client = AnkiClient()
        self.pipeline = ProcessingPipeline()
        self.validator = NoteValidator()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        print("=== Anki English Learning Assistant ===\n")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._initialize()
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã
            deck_name = await self._select_deck()
            if not deck_name:
                return
            
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏
            note_type_name = await self._select_note_type(deck_name)
            if not note_type_name:
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            confirmed = await self._confirm_configuration(deck_name, note_type_name)
            if not confirmed:
                return
            
            # –ü—Ä–µ–≤—å—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            preview_ok = await self._show_preview(deck_name, note_type_name)
            if not preview_ok:
                return
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._run_processing(deck_name, note_type_name)
            
        except KeyboardInterrupt:
            print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    async def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã."""
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anki
        if not await self.anki_client.check_connection():
            raise RuntimeError(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Anki.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Anki –∑–∞–ø—É—â–µ–Ω –∏ AnkiConnect —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        await self.pipeline.initialize()
        
        print("‚úì –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
    
    async def _select_deck(self) -> Optional[str]:
        """–í—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã."""
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥...")
        decks = await self.anki_client.get_deck_names()
        
        if not decks:
            print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–ª–æ–¥—ã")
            return None
        
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–¥—ã ({len(decks)}):")
        for i, deck in enumerate(decks, 1):
            print(f"  {i}. {deck}")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É (1-{len(decks)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
                
                if choice.lower() == 'q':
                    return None
                
                index = int(choice) - 1
                if 0 <= index < len(decks):
                    selected_deck = decks[index]
                    print(f"‚úì –í—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–¥–∞: {selected_deck}\n")
                    return selected_deck
                else:
                    print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–ª–æ–¥—ã")
                    
            except ValueError:
                print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    async def _select_note_type(self, deck_name: str) -> Optional[str]:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–º–µ—Ç–∫–∏."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫
        available_types = await self.anki_client.get_model_names()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        supported_types = [
            note_type for note_type in available_types 
            if note_type in NOTE_TYPE_CONFIGS
        ]
        
        if not supported_types:
            print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–º–µ—Ç–æ–∫")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: {list(NOTE_TYPE_CONFIGS.keys())}")
            return None
        
        print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∑–∞–º–µ—Ç–æ–∫ ({len(supported_types)}):")
        for i, note_type in enumerate(supported_types, 1):
            print(f"  {i}. {note_type}")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏ (1-{len(supported_types)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
                
                if choice.lower() == 'q':
                    return None
                
                index = int(choice) - 1
                if 0 <= index < len(supported_types):
                    selected_type = supported_types[index]
                    print(f"‚úì –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏: {selected_type}\n")
                    return selected_type
                else:
                    print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∏–ø–∞")
                    
            except ValueError:
                print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    async def _confirm_configuration(self, deck_name: str, note_type_name: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        config = NOTE_TYPE_CONFIGS[note_type_name]
        
        print("=== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò ===")
        print(f"–ö–æ–ª–æ–¥–∞: {deck_name}")
        print(f"–¢–∏–ø –∑–∞–º–µ—Ç–∫–∏: {note_type_name}")
        print(f"–°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω: {'–î–∞' if PROCESSING_CONFIG.dry_run else '–ù–µ—Ç'}")
        print(f"–ü—Ä–æ–ø—É—Å–∫ –∞—É–¥–∏–æ: {'–î–∞' if PROCESSING_CONFIG.skip_audio else '–ù–µ—Ç'}")
        print(f"–ü—Ä–æ–ø—É—Å–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏: {'–î–∞' if PROCESSING_CONFIG.skip_frequency else '–ù–µ—Ç'}")
        print(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {'–î–∞' if PROCESSING_CONFIG.skip_invalid_notes else '–ù–µ—Ç'}")
        
        if PROCESSING_CONFIG.force_regenerate:
            print(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {', '.join(PROCESSING_CONFIG.force_regenerate)}")
        
        print(f"\n–ü–æ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"  INPUT (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã): {config.input_fields}")
        print(f"  GENERATE (–±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã): {config.generate_fields}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π
        anki_fields = await self.anki_client.get_model_field_names(note_type_name)
        compatible, missing = self.validator.validate_note_type_compatibility(
            anki_fields, note_type_name
        )
        
        if not compatible:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ Anki: {missing}")
        
        while True:
            choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É? (y/n): ").strip().lower()
            if choice in ['y', 'yes', '–¥–∞']:
                return True
            elif choice in ['n', 'no', '–Ω–µ—Ç']:
                return False
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")
    
    async def _show_preview(self, deck_name: str, note_type_name: str) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é."""
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∑–∞–º–µ—Ç–æ–∫...")
        
        preview = await self.pipeline.get_deck_preview(deck_name, note_type_name)
        
        print(f"\n=== –ü–†–ï–í–¨–Æ –ö–û–õ–û–î–´ ===")
        print(f"–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {preview['total_notes']}")
        
        if preview['total_notes'] == 0:
            print("–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation = preview['validation']
        print(f"–í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {validation['valid_notes']}")
        print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {validation['invalid_notes']}")
        
        if validation['invalid_notes'] > 0:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {validation['error_count']} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            
            show_errors = input("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫? (y/n): ").strip().lower()
            if show_errors in ['y', 'yes', '–¥–∞']:
                await self._show_validation_errors(deck_name, note_type_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–º–µ—Ç–æ–∫
        if preview['sample_notes']:
            print(f"\n–ü—Ä–∏–º–µ—Ä –∑–∞–º–µ—Ç–æ–∫ (–ø–µ—Ä–≤—ã–µ {len(preview['sample_notes'])}):")
            for note in preview['sample_notes']:
                print(f"  ID {note['note_id']}: {note['fields']}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        if validation['invalid_notes'] > 0:
            if PROCESSING_CONFIG.skip_invalid_notes:
                print(f"\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø: {validation['invalid_notes']} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                print(f"–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ {validation['valid_notes']} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫")
            elif not PROCESSING_CONFIG.dry_run:
                print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {validation['invalid_notes']} –∑–∞–º–µ—Ç–æ–∫ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                
                while True:
                    choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏? (y/n): ").strip().lower()
                    if choice in ['y', 'yes', '–¥–∞']:
                        return True
                    elif choice in ['n', 'no', '–Ω–µ—Ç']:
                        return False
                    else:
                        print("–í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")
        
        return True
    
    async def _show_validation_errors(self, deck_name: str, note_type_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        query = f'deck:"{deck_name}" note:"{note_type_name}"'
        note_ids = await self.anki_client.find_notes(query)
        notes = await self.anki_client.get_notes_info(note_ids)
        
        validation_report = self.validator.validate_notes(notes, note_type_name)
        
        if validation_report.errors:
            print("\n=== –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö –í–ê–õ–ò–î–ê–¶–ò–ò ===")
            print(self.validator.print_validation_report(validation_report))
    
    async def _run_processing(self, deck_name: str, note_type_name: str):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        if PROCESSING_CONFIG.dry_run:
            print("üîÑ –ó–∞–ø—É—Å–∫ –°–£–•–û–ì–û –ü–†–û–ì–û–ù–ê (–∑–∞–º–µ—Ç–∫–∏ –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã)")
        else:
            print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–æ–∫...")
        
        result = await self.pipeline.process_deck(deck_name, note_type_name)
        
        if result.success:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            if result.error:  # –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"üìä {result.error}")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            if result.error:
                print(f"üìä {result.error}")
    
    def _handle_interrupt(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."""
        print("\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É graceful shutdown


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ CLI."""
    cli = CLIInterface()
    await cli.run()


def cli_entry_point():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è setuptools."""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    cli_entry_point()
